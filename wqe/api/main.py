from fastapi import FastAPI, HTTPException, APIRouter
from transformers import BertForSequenceClassification, BertTokenizer
import torch
from fastapi.middleware.cors import CORSMiddleware
from datetime import datetime, timedelta
import uuid
from typing import Dict, Any, List, Optional
import redis
import json
from collections import defaultdict

import numpy as np

from telegram_notifier import telegram_notifier
app = FastAPI(title="Security Log API", version="1.0.0")

# Step 1: Load the model and tokenizer from Hugging Face
model = BertForSequenceClassification.from_pretrained("rahulm-selector/log-classifier-BERT-v1")
tokenizer = BertTokenizer.from_pretrained("rahulm-selector/log-classifier-BERT-v1")

# –ö–ª–∞—Å—Å—ã –∞–Ω–æ–º–∞–ª–∏–π
ANOMALY_CLASSES = {
    "0": "ALERT_IFD_CHANGE",
    "1": "ASIC_ALARM",
    "2": "BGP_INFO",
    "3": "INTERFACE_FLAP",
    "4": "InterfaceEvent",
    "5": "LLDP_NBR_DOWN",
    "6": "MPLS_CONFIG_CHANGE",
    "7": "MPLS_INTF_MAX_LABELS_ERROR",
    "8": "MPLS_PATH_STATUS",
    "9": "OAM_ADJACENCY_CFM",
    "10": "OAM_CFM",
    "11": "OAM_GENERAL",
    "12": "OSPF_NBRDOWN",
    "13": "RPD_RSVP_BYPASS_DOWN",
    "14": "RPD_RSVP_BYPASS_UP",
    "15": "RSVP_NBRDOWN",
    "16": "SMIC_SFPP_FAILED",
    "17": "SNMPD_AUTH_FAILURE",
    "18": "VRRPD_MISSING_VIP",
    "19": "aaa",
    "20": "bfd_change",
    "21": "bfd_down",
    "22": "bfd_flap",
    "23": "bfd_sess_create",
    "24": "bfd_sess_destroy",
    "25": "bfd_state_change",
    "26": "bgp_nbr_down",
    "27": "bgp_nbr_reset",
    "28": "bgp_state_change",
    "29": "bgp_updown",
    "30": "cli_cmd_executed",
    "31": "config_event",
    "32": "critical_log_event",
    "33": "demon_timeouts",
    "34": "eigrp",
    "35": "firewall_critical",
    "36": "firewall_high",
    "37": "firewall_low",
    "38": "firewall_medium",
    "39": "if_down",
    "40": "if_flap",
    "41": "if_lag",
    "42": "if_security",
    "43": "if_updown",
    "44": "neighbor_updown",
    "45": "ospf_neigh_state_flap",
    "46": "port_link_updown",
    "47": "power_change",
    "48": "ptp",
    "49": "rt_entry_add_msg_proc",
    "50": "rt_entry_failed",
    "51": "sfp_link_power",
    "52": "ssh",
    "53": "stp",
    "54": "stp_change",
    "55": "system_reboot",
    "56": "ui_commit_progress",
    "57": "ui_config_audit",
    "58": "vrrp_vlan"
}

# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª–∞—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –∞–Ω–æ–º–∞–ª–∏—è–º–∏
CRITICAL_ANOMALY_CLASSES = {
    "1", "2", "3", "5", "6", "7", "8", "12", "13", "15", "16", "17",
    "20", "21", "22", "25", "26", "27", "28", "29", "32", "35", "36",
    "39", "40", "42", "45", "50", "52", "54", "55"
}

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
redis_client = redis.Redis(host='redis', port=6379, db=0, decode_responses=True)

# –°–æ–∑–¥–∞–µ–º router –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
router = APIRouter()

def classify_log_with_bert(log_text: str) -> Dict[str, Any]:
    """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–æ–≥–∞ —Å –ø–æ–º–æ—â—å—é BERT –º–æ–¥–µ–ª–∏"""
    try:
        # –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
        inputs = tokenizer(
            log_text,
            return_tensors="pt",
            truncation=True,
            padding=True,
            max_length=512
        )
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        with torch.no_grad():
            outputs = model(**inputs)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        predictions = torch.nn.functional.softmax(outputs.logits, dim=-1)
        predicted_class = torch.argmax(predictions, dim=-1).item()
        confidence = predictions[0][predicted_class].item()
        
        class_name = ANOMALY_CLASSES.get(str(predicted_class), "UNKNOWN")
        
        return {
            "class_id": predicted_class,
            "class_name": class_name,
            "confidence": float(confidence),
            "is_anomaly": str(predicted_class) in CRITICAL_ANOMALY_CLASSES
        }
    
    except Exception as e:
        return {
            "class_id": -1,
            "class_name": "ERROR",
            "confidence": 0.0,
            "is_anomaly": False,
            "error": str(e)
        }

async def detect_and_store_anomaly(log_data: Dict[str, Any], bert_result: Dict[str, Any]):
    """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram"""
    if bert_result["is_anomaly"]:
        anomaly_id = str(uuid.uuid4())
        timestamp = datetime.utcnow().isoformat()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º severity –Ω–∞ –æ—Å–Ω–æ–≤–µ confidence
        confidence = bert_result['confidence']
        if confidence > 0.8:
            severity = 'high'
        elif confidence > 0.6:
            severity = 'medium'
        else:
            severity = 'low'
        
        anomaly_data = {
            'id': anomaly_id,
            'log_id': log_data.get('event_id', 'unknown'),
            'source': log_data.get('source', 'unknown'),
            'log_type': log_data.get('log_type', 'unknown'),
            'timestamp': timestamp,
            'bert_class': bert_result['class_name'],
            'bert_class_id': bert_result['class_id'],
            'confidence': confidence,
            'severity': severity,
            'description': f"BERT detected anomaly: {bert_result['class_name']} (confidence: {confidence:.3f})",
            'raw_log': json.dumps(log_data.get('raw_data', {})),
            'status': 'new'
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–æ–º–∞–ª–∏—é –≤ Redis
        anomaly_key = f"anomaly:{anomaly_id}"
        redis_client.hset(anomaly_key, mapping=anomaly_data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        redis_client.zadd("anomalies:timestamps", {anomaly_key: datetime.utcnow().timestamp()})
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–Ω–æ–º–∞–ª–∏–π
        redis_client.lpush("anomalies_list", anomaly_id)
        
        print(f"Anomaly detected: {bert_result['class_name']} (confidence: {confidence:.3f}, severity: {severity})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º alert –≤ Telegram –µ—Å–ª–∏ confidence –≤—ã—Å–æ–∫–∏–π
        if confidence >= telegram_notifier.alert_threshold:
            telegram_notifier.send_alert(anomaly_data)
        
        return anomaly_data
    
    return None

@app.get("/api/v1/telegram/status")
async def get_telegram_status():
    """–°—Ç–∞—Ç—É—Å Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    return {
        "enabled": telegram_notifier.enabled,
        "connected": telegram_notifier.test_connection(),
        "alert_threshold": telegram_notifier.alert_threshold,
        "bot_configured": bool(telegram_notifier.bot_token),
        "chat_configured": bool(telegram_notifier.chat_id)
    }

@app.post("/api/v1/telegram/test")
async def test_telegram_alert():
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ alert –≤ Telegram"""
    test_anomaly = {
        'id': 'test-' + str(uuid.uuid4()),
        'bert_class': 'TEST_ALERT',
        'confidence': 0.95,
        'severity': 'high',
        'source': 'test-system',
        'timestamp': datetime.utcnow().isoformat(),
        'description': 'Test alert from security system'
    }
    
    success = telegram_notifier.send_alert(test_anomaly)
    return {"success": success, "message": "Test alert sent" if success else "Failed to send test alert"}
@app.get("/")
async def root():
    return {"message": "Security Log API is running!"}

@app.get("/health")
async def health_check():
    try:
        redis_ok = redis_client.ping()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ BERT
        test_text = "test log message"
        bert_result = classify_log_with_bert(test_text)
        bert_ok = bert_result["class_id"] != -1
        
        return {
            "status": "healthy",
            "timestamp": datetime.utcnow().isoformat(),
            "redis_connected": redis_ok,
            "bert_model_loaded": bert_ok,
            "service": "log-api"
        }
    except Exception as e:
        return {
            "status": "degraded",
            "timestamp": datetime.utcnow().isoformat(),
            "error": str(e),
            "service": "log-api"
        }

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç endpoint –≤ api/main.py (–ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö endpoints)
@app.post("/api/v1/chat")
async def chat_with_ai(request: Dict[str, Any]):
    """Endpoint –¥–ª—è —á–∞—Ç–∞ —Å –ò–ò"""
    try:
        message = request.get('message', '')
        chat_history = request.get('chat_history', [])
        
        # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if message.lower() == "—Ç–µ—Å—Ç":
            return {
                "response": "‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
                "function_called": None
            }
        elif "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫" in message.lower():
            return {
                "response": "üìä –í–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n‚Ä¢ –õ–æ–≥–∏: 150\n‚Ä¢ –ê–Ω–æ–º–∞–ª–∏–∏: 12\n‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∞–Ω–æ–º–∞–ª–∏–π: 8%",
                "function_called": None
            }
        elif "–∞–Ω–æ–º–∞–ª" in message.lower():
            return {
                "response": "üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ 12 –∞–Ω–æ–º–∞–ª–∏–π:\n‚Ä¢ 5 –≤—ã—Å–æ–∫–æ–π —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏\n‚Ä¢ 4 —Å—Ä–µ–¥–Ω–µ–π\n‚Ä¢ 3 –Ω–∏–∑–∫–æ–π",
                "function_called": None
            }
        else:
            return {
                "response": f"ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –í—ã —Å–∫–∞–∑–∞–ª–∏: '{message}'\n\n–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏–∑–æ–º –ª–æ–≥–æ–≤, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º –∞–Ω–æ–º–∞–ª–∏–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
                "function_called": None
            }
        
    except Exception as e:
        return {
            "response": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}",
            "error": True
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Chat error: {str(e)}")

@app.post("/api/v1/logs")
async def ingest_log(log_data: Dict[str, Any]):
    """Endpoint –¥–ª—è –ø—Ä–∏–µ–º–∞ –ª–æ–≥–æ–≤"""
    try:
        log_id = str(uuid.uuid4())
        timestamp = log_data.get('timestamp', datetime.utcnow().isoformat())
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ª–æ–≥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ BERT
        log_text = ""
        raw_data = log_data.get('raw_data', {})
        if isinstance(raw_data, dict):
            log_text = raw_data.get('msg', '') or str(raw_data)
        else:
            log_text = str(raw_data)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥ —Å –ø–æ–º–æ—â—å—é BERT
        bert_result = classify_log_with_bert(log_text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
        log_key = f"log:{log_id}"
        redis_client.hset(log_key, mapping={
            'id': log_id,
            'source': log_data.get('source', 'unknown'),
            'log_type': log_data.get('log_type', 'unknown'),
            'timestamp': timestamp,
            'raw_data': json.dumps(log_data.get('raw_data', {})),
            'bert_class': bert_result['class_name'],
            'bert_class_id': str(bert_result['class_id']),
            'bert_confidence': str(bert_result['confidence']),
            'is_anomaly': str(bert_result['is_anomaly'])
        })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞
        redis_client.zadd("logs:timestamps", {log_key: datetime.utcnow().timestamp()})
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        redis_client.lpush("logs_list", json.dumps({
            **log_data,
            'bert_analysis': bert_result
        }))
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∞–Ω–æ–º–∞–ª–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
        anomaly = None
        if bert_result["is_anomaly"]:
            anomaly = await detect_and_store_anomaly(log_data, bert_result)
        
        return {
            "status": "success",
            "log_id": log_id,
            "bert_analysis": bert_result,
            "anomaly_detected": bert_result["is_anomaly"],
            "anomaly_id": anomaly["id"] if anomaly else None
        }
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/api/v1/logs/create")
async def create_log(log: Dict[Any, Any]):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–æ–≤"""
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥ —Å –ø–æ–º–æ—â—å—é BERT
        log_text = ""
        raw_data = log.get('raw_data', {})
        if isinstance(raw_data, dict):
            log_text = raw_data.get('msg', '') or str(raw_data)
        else:
            log_text = str(raw_data)
        
        bert_result = classify_log_with_bert(log_text)
        
        # Save log as JSON string in Redis list
        log_with_bert = {
            **log,
            'bert_analysis': bert_result
        }
        redis_client.lpush("logs_list", json.dumps(log_with_bert))
        
        # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ hash –¥–ª—è consistency
        log_id = log.get('event_id', str(uuid.uuid4()))
        log_key = f"log:{log_id}"
        redis_client.hset(log_key, mapping={
            'id': log_id,
            'source': log.get('source', 'unknown'),
            'log_type': log.get('log_type', 'unknown'),
            'timestamp': log.get('timestamp', datetime.utcnow().isoformat()),
            'raw_data': json.dumps(log.get('raw_data', {})),
            'bert_class': bert_result['class_name'],
            'bert_class_id': str(bert_result['class_id']),
            'bert_confidence': str(bert_result['confidence']),
            'is_anomaly': str(bert_result['is_anomaly'])
        })
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∞–Ω–æ–º–∞–ª–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
        anomaly = None
        if bert_result["is_anomaly"]:
            anomaly = await detect_and_store_anomaly(log, bert_result)
        
        return {
            "status": "success",
            "log_id": log_id,
            "bert_analysis": bert_result,
            "anomaly_detected": bert_result["is_anomaly"],
            "anomaly_id": anomaly["id"] if anomaly else None
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/api/v1/logs/stats")
async def get_logs_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–æ–≥–∞–º"""
    try:
        logs = redis_client.lrange("logs_list", 0, -1)
        log_dicts: List[Dict[str, Any]] = []
        
        for log_str in logs:
            try:
                log_dict = json.loads(log_str)
                log_dicts.append(log_dict)
            except Exception:
                continue

        total_logs = len(log_dicts)
        by_severity = defaultdict(int)
        by_type = defaultdict(int)
        by_bert_class = defaultdict(int)
        anomalies_count = 0
        
        for log in log_dicts:
            severity = log.get("severity", "unknown")
            log_type = log.get("log_type", "unknown")
            bert_class = log.get('bert_analysis', {}).get('class_name', 'unknown')
            
            by_severity[severity] += 1
            by_type[log_type] += 1
            by_bert_class[bert_class] += 1
            
            if log.get('bert_analysis', {}).get('is_anomaly', False):
                anomalies_count += 1

        return {
            "total": total_logs,
            "anomalies": anomalies_count,
            "by_severity": dict(by_severity),
            "by_type": dict(by_type),
            "by_bert_class": dict(by_bert_class),
            "timestamp": datetime.utcnow().isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/api/v1/logs/search")
async def search_logs(
    time_range: str = "24h",
    severity: Optional[str] = None,
    type: Optional[str] = None,
    anomaly: Optional[bool] = None,
    limit: int = 100
):
    """–ü–æ–∏—Å–∫ –ª–æ–≥–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    try:
        logs = redis_client.lrange("logs_list", 0, -1)
        log_dicts: List[Dict[str, Any]] = []
        
        for log_str in logs:
            try:
                log_dict = json.loads(log_str)
                log_dicts.append(log_dict)
            except Exception:
                continue

        filtered_logs: List[Dict[str, Any]] = []
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—Ä–æ–≥
        hours = int(time_range.replace("h", "")) if time_range.endswith("h") else int(time_range)
        time_threshold = datetime.utcnow() - timedelta(hours=hours)

        for log in log_dicts:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            log_time_str = log.get("timestamp")
            if log_time_str:
                try:
                    log_time = datetime.fromisoformat(log_time_str.replace('Z', '+00:00'))
                    if log_time < time_threshold:
                        continue
                except Exception:
                    continue

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ severity
            if severity and log.get("severity") != severity:
                continue
                
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É
            if type and log.get("log_type") != type:
                continue
                
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞–Ω–æ–º–∞–ª–∏–∏
            if anomaly is not None:
                is_anomaly = log.get('bert_analysis', {}).get('is_anomaly', False)
                if is_anomaly != anomaly:
                    continue

            filtered_logs.append(log)
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
            if len(filtered_logs) >= limit:
                break

        return {
            "results": filtered_logs,
            "count": len(filtered_logs),
            "time_range": time_range
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/api/v1/anomalies/stats")
async def get_anomaly_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π"""
    try:
        anomaly_keys = redis_client.keys("anomaly:*")
        total_anomalies = len(anomaly_keys)
        
        by_severity = defaultdict(int)
        by_bert_class = defaultdict(int)
        by_status = defaultdict(int)
        
        for key in anomaly_keys:
            anomaly_data = redis_client.hgetall(key)
            if anomaly_data:
                severity = anomaly_data.get('severity', 'unknown')
                bert_class = anomaly_data.get('bert_class', 'unknown')
                status = anomaly_data.get('status', 'new')
                
                by_severity[severity] += 1
                by_bert_class[bert_class] += 1
                by_status[status] += 1
        
        return {
            "total_anomalies": total_anomalies,
            "by_severity": dict(by_severity),
            "by_bert_class": dict(by_bert_class),
            "by_status": dict(by_status),
            "timestamp": datetime.utcnow().isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/api/v1/anomalies/search")
async def search_anomalies(
    time_range: str = "24h",
    severity: Optional[str] = None,
    bert_class: Optional[str] = None,
    status: Optional[str] = None,
    limit: int = 50
):
    """–ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π"""
    try:
        anomaly_keys = redis_client.keys("anomaly:*")
        anomalies = []
        
        hours = int(time_range.replace("h", "")) if time_range.endswith("h") else 24
        time_threshold = datetime.utcnow() - timedelta(hours=hours)
        
        for key in anomaly_keys:
            anomaly_data = redis_client.hgetall(key)
            if anomaly_data:
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                anomaly_time_str = anomaly_data.get('timestamp')
                if anomaly_time_str:
                    try:
                        anomaly_time = datetime.fromisoformat(anomaly_time_str.replace('Z', '+00:00'))
                        if anomaly_time < time_threshold:
                            continue
                    except Exception:
                        continue
                
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ severity
                if severity and anomaly_data.get('severity') != severity:
                    continue
                    
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª–∞—Å—Å—É BERT
                if bert_class and anomaly_data.get('bert_class') != bert_class:
                    continue
                    
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ status
                if status and anomaly_data.get('status') != status:
                    continue
                
                # –ü–∞—Ä—Å–∏–º confidence
                try:
                    anomaly_data['confidence'] = float(anomaly_data.get('confidence', 0))
                except:
                    anomaly_data['confidence'] = 0.0
                
                anomalies.append(anomaly_data)
                
                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
                if len(anomalies) >= limit:
                    break
        
        return {
            "anomalies": anomalies,
            "count": len(anomalies),
            "time_range": time_range,
            "filters": {
                "severity": severity,
                "bert_class": bert_class,
                "status": status
            }
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/v1/query")
async def query_logs(request: Dict[str, Any]):
    """Query endpoint –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–≥–æ–≤"""
    try:
        time_range = request.get('time_range', '1h')
        limit = min(request.get('limit', 100), 1000)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –ª–æ–≥–æ–≤
        log_keys = redis_client.keys("log:*")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        log_keys = log_keys[:limit]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–≥–æ–≤
        logs = []
        for key in log_keys:
            log_data = redis_client.hgetall(key)
            if log_data:
                # –ü–∞—Ä—Å–∏–º raw_data –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏
                if 'raw_data' in log_data:
                    try:
                        log_data['raw_data'] = json.loads(log_data['raw_data'])
                    except:
                        log_data['raw_data'] = {}
                logs.append(log_data)
        
        return {
            "results": logs,
            "count": len(logs),
            "time_range": time_range
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/v1/stats")
async def get_stats():
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        total_logs_hash = len(redis_client.keys("log:*"))
        total_logs_list = redis_client.llen("logs_list")
        total_anomalies = len(redis_client.keys("anomaly:*"))
        
        redis_info = redis_client.info()
        
        return {
            "logs": {
                "hash_storage": total_logs_hash,
                "list_storage": total_logs_list,
                "total_unique": total_logs_hash
            },
            "anomalies": {
                "total": total_anomalies,
                "new": len([k for k in redis_client.keys("anomaly:*") 
                          if redis_client.hget(k, 'status') == 'new'])
            },
            "bert_model": {
                "classes_loaded": len(ANOMALY_CLASSES),
                "critical_classes": len(CRITICAL_ANOMALY_CLASSES)
            },
            "redis": {
                "used_memory": redis_info.get('used_memory_human', 'N/A'),
                "connected_clients": redis_info.get('connected_clients', 0)
            },
            "timestamp": datetime.utcnow().isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# –ü–æ–¥–∫–ª—é—á–∞–µ–º router —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏
app.include_router(router)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)